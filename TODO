
General: 
  ☐ Following best practices for project files structure
  ☐ Implementing a role-based access control (RBAC)
  ☐ Using OAuth2 scopes to have more control over permissions system
  ☐ Managing tokens with JWT from jose package 
  ☐ Using sqlalchemy as an object relation mapper (ORM)
  ☐ The credentials, secrets, and configurations are separated from the code
  ☐ Set pylint as linter & black as formatter for the project

UI:
  ☐ Add user referral id to the user model
  ☐ Add referral link to manager page
  ☐ Add table to each model
  ☐ Add type [SIMPLE, CUSTOM] for license field
  ☐ Add edit link to license field

License edit (UI): 
  Simple license:
    ☐ Add edit link (open in new view)
  Custom license:
    ☐ Add edit link (open in new view)

Users scenarios:
  ☐ Guest user can create user 

Questions:
  ☐ Each product has one license or many
  ☐ Each license has one product or many
  ☐ license has expiration time
  ☐ license has activation limit
Taiga:
  Setup the frontend project:
    ☐ Managing files structure (components, modules, routing, services, guards)
    ☐ Adding proxy configuration, linter, code formatter 
  Authentication view:
    ☐ Create signup
    ☐ Create login
  Dashboard for managing licenses:
    ☐ Adding ui table for each model (e.g. license model get ui table)
    ☐ Adding crud views for each model
  Form builder:
    ☐ create form builder view to generate forms for custom license  
  Implementing RBAC views:
    ☐ Adding user hierarchy 
    ☐ Adding user management
  ☐ Managing token expiration time in the front